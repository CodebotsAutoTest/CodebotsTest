###
# @bot-written
# 
# WARNING AND NOTICE
# Any access, download, storage, and/or use of this source code is subject to the terms and conditions of the
# Full Software Licence as accepted by you before being granted access to this source code and other materials,
# the terms of which can be accessed on the Codebots website at https://codebots.com/full-software-licence. Any
# commercial use in contravention of the terms of the Full Software Licence may be pursued by Codebots through
# licence termination and further legal action, and be required to indemnify Codebots for any loss or damage,
# including interest and costs. You are deemed to have accepted the terms of the Full Software Licence on any
# access, download, storage, and/or use of this source code.
# 
# BOT WARNING
# This file is bot-written.
# Any changes out side of "protected regions" will be lost next time the bot makes any changes.
###

# % protected region % [Customise your compose file here] off begin
version: '3.4'
services:
  db:
    image: postgres:11
    environment:
      POSTGRES_DB: codebots
      POSTGRES_USER: codebots
      POSTGRES_PASSWORD: bots
    networks:
      - bridge
    volumes:
      - postgres_data:/var/lib/postgresql/data
  pgAdmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: codebots@example.com
      PGADMIN_DEFAULT_PASSWORD: bots
      PGADMIN_LISTEN_PORT: 9090
    networks:
      - bridge
    ports:
      - 9091:9090
  client:
    image: node:10-alpine
    working_dir: /usr/src/app
    command:  sh -c "
      npm i -g yarn;
      yarn install;
      HOST=0.0.0.0 yarn start;
      tail -f /dev/null"
    networks:
      - bridge
    volumes:
      - ./clientside:/usr/src/app/
      - node_modules:/usr/src/app/node_modules
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:3000" ]
      interval: 60s
      timeout: 2s
      retries: 12
      start_period: 60s
  server:
    image: mcr.microsoft.com/dotnet/core/sdk:3.1
    working_dir: /usr/src/app/
    command: bash -c 'bash -s <<EOF;
      echo "Creating manifest...";
      dotnet new tool-manifest;
      dotnet tool install --local dotnet-ef --version 3.1.1;
      mkdir -p Migrations;
      MIGRATION=$$(date +"%s");
      echo "Creating new migration $$MIGRATION...";
      dotnet dotnet-ef migrations add $$MIGRATION;
      MIGRATION_FILE="./Migrations/*_$$MIGRATION.cs";
      if [ $$(grep -Pzoc "\{\n\s*\n\s*}" $$MIGRATION_FILE) -gt 0 ];
      then echo "Migration not required, removing it...";
      dotnet dotnet-ef migrations remove;
      fi;
      echo "Applying migrations...";
      dotnet dotnet-ef database update;
      echo "Launching server...";
      dotnet run --launch-profile Docker;
      tail -f /dev/null;
      EOF'
    environment:
      ServerSettings__ServerUrl: http://0.0.0.0:5000
      ConnectionStrings__DbConnectionString: Server=db;Database=codebots;Username=codebots;Password=bots
      ClientServerSettings__UseProxyServer: "true"
      ClientServerSettings__ProxyServerAddress: http://client:3000
    networks:
      - bridge
    depends_on:
      - db
      - client
    volumes:
      - ./serverside/src:/usr/src/app
    ports:
      - 8000:5000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api"]
      interval: 60s
      timeout: 2s
      retries: 12
      start_period: 60s

networks:
  bridge:

volumes:
  node_modules:
  postgres_data:

# % protected region % [Customise your compose file here] end
